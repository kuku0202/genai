\paragraph{Lambda Stage (PDF to PowerPoint)}
\begin{itemize}
    \item Triggered by a new record in DynamoDB, \texttt{lambda\_func.py} handles PDF processing.
    \item It downloads the uploaded PDF from S3, uses \texttt{process\_pdf()} (in \texttt{ppt.py}) to extract figures and text using PyMuPDF and LayoutParser, and generates annotated folders per page.
    \item The folders include images, slide scripts, and teacher scripts, which are all uploaded to S3 for future use.
    \item Then, \texttt{create\_pptx()} generates a PowerPoint file (\texttt{.pptx}) using \href{https://python-pptx.readthedocs.io/en/latest/}{\texttt{python-pptx}}, and saves it locally before uploading to S3.
    \item The generated file is also emailed to the user using AWS SES (\texttt{send\_email\_with\_attachment}).
    \item Finally, a message with metadata (PPT key, PDF name, user email) is sent to SQS for video generation.
\end{itemize}

\paragraph{EC2 Stage (PPT to Video)}
\begin{itemize}
    \item A long-running container (\texttt{main.py}) continuously polls the SQS queue for new messages.
    \item Upon receiving a task, it downloads the generated PPTX and its corresponding page folders (scripts, images) using \texttt{download\_folder()}.
    \item Slide images are extracted via \texttt{extract-ppt.py}, which internally uses LibreOffice to export each slide to PNG.
    \item Then, \texttt{video.py} is called to synthesize narration from scripts (using TTS like gTTS or edge-tts) and merge it with slide images into an MP4 using FFmpeg.
    \item The final video is uploaded to S3, and a pre-signed download link is emailed to the user via \texttt{send\_email\_with\_link()}.
\end{itemize}

\paragraph{Dockerized Environments}
\begin{itemize}
    \item \textbf{Lambda Image:} Built from \href{https://hub.docker.com/r/public.ecr.aws/lambda/python}{AWS Lambda Python 3.10 base image}, the Dockerfile installs PyMuPDF, LayoutParser, and Detectron2 (for layout detection), and sets the handler to \texttt{lambda\_func.lambda\_handler}. See \texttt{Dockerfile.lambda}.
    \item \textbf{EC2 Image:} Based on \texttt{python:3.10-slim}, the image installs LibreOffice, FFmpeg, Tesseract, and required Python packages. It runs \texttt{main.py} by default. See \texttt{Dockerfile.ec2}.
\end{itemize}
